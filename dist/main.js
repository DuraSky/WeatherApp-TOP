(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),c=n.n(o)()(a());c.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(c[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&c[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},c=[],i=0;i<e.length;i++){var d=e[i],s=r.base?d[0]+r.base:d[0],l=o[s]||0,p="".concat(s," ").concat(l);o[s]=l+1;var u=n(p),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var f=a(m,r);r.byIndex=i,t.splice(i,0,{identifier:p,updater:f,references:1})}c.push(p)}return c}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<o.length;c++){var i=n(o[c]);t[i].references--}for(var d=r(e,a),s=0;s<o.length;s++){var l=n(o[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=d}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),o=n(569),c=n.n(o),i=n(565),d=n.n(i),s=n(216),l=n.n(s),p=n(589),u=n.n(p),m=n(426),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=document.getElementById("townForm");document.getElementById("search").addEventListener("click",(async()=>{let e=h.value,t=await async function(e){try{let t="http://api.weatherapi.com/v1/forecast.json?key=59b30c4f89b04cea93794629241901&q="+e+"&days=4&aqi=no";console.log(t);let n=await fetch(t,{mode:"cors"});if(!n.ok)throw await n.json(),new Error("Bad request");return await n.json()}catch(e){alert("Your search was not processed, either the location you are searching for is not in the database, or WeatherAPI is not working, please retry.")}}(e);h.value="",function(e){const t=document.getElementById("content");t.innerHTML="";const n=document.createElement("div");n.setAttribute("id","mainInfo"),console.log("lenght"),console.log(t.children.length),console.log("Inside display"),console.log(e);let r=e.location.name,a=e.location.region,o=e.location.country,c=e.location.localtime,i=document.createElement("div");i.setAttribute("id","locationDiv");let d=document.createElement("p");d.innerHTML=r;let s=document.createElement("p");s.innerHTML=a;let l=document.createElement("p");l.innerHTML=o;let p=document.createElement("p");p.innerHTML="Local time: "+c,i.appendChild(d),i.appendChild(s),i.appendChild(l),i.appendChild(p);let u=e.current.condition.text,m=e.current.temp_c,f=e.current.feelslike_c,h=e.current.humidity,y=e.current.wind_kph;const v="http:"+e.current.condition.icon;let g=document.createElement("div");g.setAttribute("id","weatherInfo");let C=document.createElement("p");C.innerHTML="Celsius: "+m;let E=document.createElement("p");E.innerHTML="Feels like :"+f;let M=document.createElement("p");M.innerHTML=u;let T=document.createElement("img");T.src=v;let L=document.createElement("p");L.innerHTML="Huminidity: "+h;let H=document.createElement("p");H.innerHTML="Wind speed Km: "+y;const b=document.createElement("div");b.setAttribute("id","forecast");let w=e.forecast.forecastday[1].date,_=e.forecast.forecastday[1].day.condition.text,x=e.forecast.forecastday[1].day.avgtemp_c,I="http:"+e.forecast.forecastday[1].day.condition.icon,k=document.createElement("div");k.setAttribute("class","day 1");let A=document.createElement("p");A.innerHTML=w;let j=document.createElement("p");j.innerHTML=_;let F=document.createElement("img");F.src=I;let S=document.createElement("p");S.innerHTML=x+" C";let B=e.forecast.forecastday[2].date,N=e.forecast.forecastday[2].day.condition.text,O=e.forecast.forecastday[2].day.avgtemp_c,P="http:"+e.forecast.forecastday[2].day.condition.icon,R=document.createElement("div");R.setAttribute("class","day 2");let Z=document.createElement("p");Z.innerHTML=B;let q=document.createElement("p");q.innerHTML=N;let U=document.createElement("img");U.src=P;let W=document.createElement("p");W.innerHTML=O+" C";let K=e.forecast.forecastday[3].date,D=e.forecast.forecastday[3].day.condition.text,J=e.forecast.forecastday[3].day.avgtemp_c,Y="http:"+e.forecast.forecastday[3].day.condition.icon,z=document.createElement("div");z.setAttribute("class","day 3");let G=document.createElement("p");G.innerHTML=K;let Q=document.createElement("p");Q.innerHTML=D;let V=document.createElement("img");V.src=Y;let X=document.createElement("p");X.innerHTML=J+" C",g.appendChild(M),g.appendChild(T),g.appendChild(C),g.appendChild(E),g.appendChild(L),g.appendChild(H),k.appendChild(A),k.appendChild(j),k.appendChild(F),k.appendChild(S),R.appendChild(Z),R.appendChild(q),R.appendChild(U),R.appendChild(W),z.appendChild(G),z.appendChild(Q),z.appendChild(V),z.appendChild(X),b.appendChild(k),b.appendChild(R),b.appendChild(z),n.appendChild(i),n.appendChild(g),n.appendChild(b),t.appendChild(n),function(e,t,n,r,a,o,c){const i=document.getElementById("content");let d=!1;const s=document.createElement("button");s.setAttribute("id","switch"),s.innerHTML="Switch Metrics",s.addEventListener("click",(()=>{let i=e.current.temp_c,s=e.current.temp_f,l=e.current.feelslike_c,p=e.current.feelslike_f,u=e.current.wind_kph,m=e.current.wind_mph,f=e.forecast.forecastday[1].day.avgtemp_c,h=e.forecast.forecastday[1].day.avgtemp_f,y=e.forecast.forecastday[2].day.avgtemp_c,v=e.forecast.forecastday[2].day.avgtemp_f,g=e.forecast.forecastday[3].day.avgtemp_c,C=e.forecast.forecastday[3].day.avgtemp_f;!1===d?(t.innerHTML="Farenhait: "+s,n.innerHTML="Feels like: "+p,r.innerHTML="Wind speed Km: "+m,a.innerHTML=h+" F",o.innerHTML=v+" F",c.innerHTML=C+" F",d=!0):!0===d&&(t.innerHTML="Celsius: "+i,n.innerHTML="Feels like: "+l,r.innerHTML="Wind speed Km: "+u,a.innerHTML=f+" C",o.innerHTML=y+" C",c.innerHTML=g+" C",d=!1)})),i.appendChild(s)}(e,C,E,H,S,W,X)}(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,